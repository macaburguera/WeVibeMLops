name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip

      - name: Install linting dependencies
        run: |
          pip install --upgrade pip
          pip install flake8
          pip install -r requirements_dev.txt

      - name: Run flake8
        run: |
          echo "Running flake8 linting..."
          flake8 --max-line-length=120 --exclude=build,dist --ignore=W293,E501,E302,W291,E305,F401 src tests
        shell: bash

  test:
    name: Run Unit Tests
    runs-on: ${{ matrix.operating-system }}
    env:
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      WANDB_MODEL_NAME: ${{ secrets.WANDB_MODEL_NAME }}
    strategy:
      matrix:
        operating-system: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Installing PyTorch with CUDA for Linux"
            pip install torch==2.2.0 torchvision==0.17.0 --index-url https://download.pytorch.org/whl/cu118
          else
            echo "Installing CPU-only PyTorch for Windows/macOS"
            pip install torch torchvision
          fi
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
          pip install tomli
          pip install coverage
          pip install pytest
          pip install -e .
          pip list
        shell: bash  # Ensures the script uses bash on all platforms

      - name: Prepare data directory
        run: |
          mkdir -p data/processed/train
          mkdir -p data/processed/validation
          rm -rf .pytest_cache
        shell: bash

      - name: Configure GCP credentials
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GDRIVE_CREDENTIALS }}
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" > gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp-key.json
        shell: bash

      - name: Run tests & coverage
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
          echo "PYTHONPATH set to ${PYTHONPATH}"
          coverage run -m pytest tests/
          coverage report -m
        shell: bash

      - name: Verify coverage file
        run: |
          if [ ! -f .coverage ]; then
            echo "Error: .coverage file not found!"
            exit 1
          else
            echo "Coverage file found."
          fi
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -delete
        shell: bash

      - name: Debug Coverage File
        run: |
          echo "Checking for .coverage file..."
          ls -la
          cat .coverage || echo "No .coverage file found"
        shell: bash

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: .coverage
