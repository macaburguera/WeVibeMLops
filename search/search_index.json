{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentation","title":"Documentation","text":"<p>Basic documentation for the dog_breed_classifier project.</p> <p>If you just want to play with the model, you can skip this and jump into our Online Viewer. Feel free to check it.</p>"},{"location":"about/","title":"About this project","text":""},{"location":"about/#overall-goal","title":"Overall Goal","text":"<p>The goal of this project is to build a dog breed classifier capable of distinguishing between 120 different breeds as accurately as possible. The focus will be on achieving fine-grained classification by leveraging state-of-the-art deep learning techniques and pretrained models.</p>"},{"location":"about/#framework","title":"Framework","text":"<p>The project will be based on PyTorch and will leverage its ecosystem for efficient model development and experimentation:</p> <ul> <li>Albumentations: To perform advanced image augmentations and effectively extend the variability of the dataset, improving the model's generalization capabilities.</li> <li>TIMM: To access a variety of pretrained models and well-known architectures, enabling faster development and more accurate predictions.</li> </ul>"},{"location":"about/#data","title":"Data","text":"<p>The dataset used will be the Stanford Dogs Dataset, which contains:</p> <ul> <li>120 dog breeds.</li> <li>20,580 images, with approximately 150 images per breed. The images are of varying resolutions and backgrounds, representing real-world diversity.</li> </ul> <p>Challenge: The dataset requires distinguishing subtle differences between breeds, often with high inter-class similarity and low intra-class variability.</p> <p>Preprocessing will include resizing images to a uniform resolution, applying Albumentations-based augmentations (e.g., cropping, flipping, color jittering), and splitting the data into training, validation, and test sets.</p>"},{"location":"about/#models","title":"Models","text":"<p>The project will primarily explore pretrained Resnet variants, which will be fine-tuned to perform an accurate classification of the different existing dog breeds.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#setting-up-the-environment","title":"Setting Up the Environment","text":"<ol> <li>Create a Conda Environment <pre><code>conda create --name dogs python=3.10\nconda activate dogs\n</code></pre>    This project has been tested with PyTorch 2.2.0 and CUDA 11.8.</li> <li>Install the Required Packages</li> </ol> <p>First, install PyTorch manually according to your cuda version. For example, for CUDA 11.8:  </p> <p><pre><code>pip install torch==2.2.0 torchvision==0.17.0 torchaudio==2.2.0 --index-url https://download.pytorch.org/whl/cu118\n</code></pre>    Then go on with the rest. To install the package:</p> <p><pre><code>pip install -e .\n</code></pre>    Or either just the strict requirements:    <pre><code>pip install -r requirements.txt\n</code></pre></p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#setting-up-the-data","title":"Setting Up the Data","text":"<p>After setting up the environment, run <code>data.py</code> to process the data from the source:</p> <p><pre><code>python src/dog_breed_classifier/data.py\n</code></pre> That will download the original dataset, preprocess it and save the train, test and validation datasets in the /data folder.</p>"},{"location":"usage/#running-training-sessions","title":"Running Training Sessions","text":""},{"location":"usage/#building-from-scratch","title":"Building from scratch","text":"<p>In Linux, Git Bash, or WSL, you can build both the processed dataset and the model by running <pre><code>chmod +x scripts/run_all.sh\n./scripts/run_all.sh\n</code></pre></p>"},{"location":"usage/#train-a-model-individually","title":"Train A Model Individually","text":"<p>To train a model on a specific configuration, run <pre><code>python src/dog_breed_classifier/train.py local\n</code></pre> You'll find the hyperparameters for a single training session in /config/config.yaml</p> <p>To do the training with wandb, run it with the flag wandb-run</p> <pre><code>python src/dog_breed_classifier/train.py wandb-run\n</code></pre>"},{"location":"usage/#parameter-sweep","title":"Parameter sweep","text":"<p>The config file with the setup can be found at /configs/sweep.yaml. To run this session:</p> <pre><code>python src/dog_breed_classifier/train.py sweep\n</code></pre>"},{"location":"usage/#updating-requirementstxt","title":"Updating <code>requirements.txt</code>","text":"<p>To update the <code>requirements.txt</code> file based on your current environment:</p> <ol> <li> <p>Install <code>pipreqs</code>:    <pre><code>pip install pipreqs\n</code></pre></p> </li> <li> <p>Generate an updated <code>requirements.txt</code>:    <pre><code>pipreqs . --force\n</code></pre></p> </li> <li> <p>When installing from source, bear in mind that the pytorch version will differ depending on the available hardware, preferrably delete it from requirements.txt and install it as explained before.</p> </li> </ol>"},{"location":"viewer/","title":"Viewer","text":""},{"location":"viewer/#online-viewer","title":"Online viewer","text":"<p>We provide an online deployed version of our model, which you can check and test by uploading your own dog photos. Check here:</p> <p>Online Viewer</p>"}]}